const axios = require('axios');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const METABASE_URL = process.env.METABASE_URL;
const BEARER_TOKEN = process.env.BEARER_TOKEN;
const BASIC_AUTH_USER = process.env.BASIC_AUTH_USER;
const BASIC_AUTH_PASS = process.env.BASIC_AUTH_PASS;
const USERNAME = process.env.USERNAME; 
const PASSWORD = process.env.PASSWORD; 
const POST_URL = 'https://api.pachca.com/api/shared/v1/messages';

const QUESTION_IDS = [601, 602, 613, 612, 614, 604, 610, 611, 603, 605]; 

let cachedData = null; 

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
async function getSessionToken() {
    const response = await axios.post(
        `${METABASE_URL}/api/session`,
        { username: USERNAME, password: PASSWORD },
        {
            headers: { 'Content-Type': 'application/json' },
            auth: { username: BASIC_AUTH_USER, password: BASIC_AUTH_PASS },
        }
    );
    console.log('Session Token –ø–æ–ª—É—á–µ–Ω');
    return response.data.id;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatNumber(num) {
    return num.toLocaleString('en-US');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
function readCache() {
    try {
        if (!fs.existsSync('cache.json')) {
            console.log('–§–∞–π–ª cache.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.');
            fs.writeFileSync('cache.json', JSON.stringify({}, null, 2), 'utf8');
        }
        const content = fs.readFileSync('cache.json', 'utf8');
        if (!content.trim()) {
            console.warn('–§–∞–π–ª cache.json –ø—É—Å—Ç. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º.');
            fs.writeFileSync('cache.json', JSON.stringify({}, null, 2), 'utf8');
            return {};
        }
        return JSON.parse(content);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ cache.json:', error.message);
        fs.writeFileSync('cache.json', JSON.stringify({}, null, 2), 'utf8');
        return {};
    }
}

function updateCache(questionId, value) {
    try {
        const cache = readCache();
        cache[questionId] = value;
        fs.writeFileSync('cache.json', JSON.stringify(cache, null, 2));
        console.log(`–ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è questionId ${questionId}: ${value}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞:', error.message);
    }
}

function getCachedValue(questionId) {
    const cache = readCache();
    return cache[questionId] || 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
async function fetchQuestionData(questionId, sessionToken) {
    try {
        const response = await axios.post(
            `${METABASE_URL}/api/card/${questionId}/query`,
            {},
            {
                headers: {
                    'Content-Type': 'application/json',
                    'X-Metabase-Session': sessionToken,
                },
                auth: { username: BASIC_AUTH_USER, password: BASIC_AUTH_PASS },
            }
        );

        const rows = response.data.data?.rows || [];
        const columns = response.data.data?.results_metadata?.columns || [];

        if (!rows.length || !columns.length) {
            console.error(`–î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ ${questionId} –ø—É—Å—Ç—ã –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.`);
            return [];
        }

        return rows.map(row =>
            row.reduce((acc, value, index) => {
                acc[columns[index].display_name || columns[index].name] = value;
                return acc;
            }, {})
        );
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ ${questionId}:`, error.message);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ payload
function createPrimaryPayload(allData) {
    const summaryData = allData.find(item => item.questionId === 611)?.data || [];
    const totalSegment = summaryData.find(segment => segment.segment === 'Total') || {};

    const currData = allData.find(item => item.questionId === 610)?.data || [];
    const currFormatted = currData.map(segment => formatNumber(segment.curr_percentage)).join('% / ');

    const primaryPayload = {
        message: {
            entity_type: "discussion",
            entity_id: 24592837,
            content: `DAU / WAU / MAU: ${formatNumber(totalSegment.dau)} / ${formatNumber(totalSegment.wau)} / ${formatNumber(totalSegment.mau)}\n` +
                     `New / Current / Dormant: ${formatNumber(totalSegment.new_users)} / ${formatNumber(totalSegment.current_users)} / ${formatNumber(totalSegment.dormant_users)}\n\n` +
                     `CURR / Ed / Pay / Free: ${currFormatted}%`,
        },
    };
    console.log('–ü–µ—Ä–≤–∏—á–Ω—ã–π Payload:', JSON.stringify(primaryPayload, null, 2));
    return primaryPayload;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ payload (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
async function sendPrimaryPayload(payload, allData) {
    try {
        const response = await axios.post(POST_URL, payload, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${BEARER_TOKEN}`,
            },
        });
        console.log('–ü–µ—Ä–≤–∏—á–Ω—ã–π Payload —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response.data);

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const messageId = response.data.data.id;
        if (messageId) {
            await createThreadForMessage(messageId, allData);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ Payload:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
async function createThreadForMessage(messageId, allData) {
    try {
        const threadResponse = await axios.post(
            `${POST_URL}/${messageId}/thread`,
            {},
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${BEARER_TOKEN}`,
                },
            }
        );

        console.log('–¢—Ä–µ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', threadResponse.data);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥
        const threadId = threadResponse.data.data.id;
        if (threadId) {
            await sendSecondaryPayload(threadId, allData);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–¥–∞:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ payload (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
async function sendSecondaryPayload(threadId, allData) {
    try {
        const counts = allData.filter(item => [601, 602, 603, 604, 605].includes(item.questionId))
            .map(item => {
                const metric = item.data[0] || {};
                switch (item.questionId) {
                    case 602: return `–ö–æ–º–ø–∞–Ω–∏–∏: ${formatNumber(metric.Count || 0)}`;
                    case 603: return `–õ–∏—á–∫–∏: ${formatNumber(metric.Count || 0)}`;
                    case 604: return `–ë–µ—Å–µ–¥—ã/–∫–∞–Ω–∞–ª—ã: ${formatNumber(metric.Count || 0)}`;
                    case 605: return `–¢—Ä–µ–¥—ã: ${formatNumber(metric.Count || 0)}`;
                    default: return "";
                }
            }).join('\n');

        const messageTotals = allData.filter(item => [613, 612, 614].includes(item.questionId))
            .map(item => {
                const metric = item.data[0] || {};
                const previousValue = getCachedValue(item.questionId);
                const currentValue = metric["Sum of Messages Count"] || 0;
                const difference = currentValue - previousValue;
                updateCache(item.questionId, currentValue);

                switch (item.questionId) {
                    case 613: return `–ë–µ—Å–µ–¥—ã/–∫–∞–Ω–∞–ª—ã: ${formatNumber(difference)}`;
                    case 612: return `–õ–∏—á–∫–∏: ${formatNumber(difference)}`;
                    case 614: return `–¢—Ä–µ–¥—ã: ${formatNumber(difference)}`;
                    default: return "";
                }
            }).join('\n');

        const formattedContent = `üë®‚ÄçüíªDaily Activ:{${counts}\n\n` +
                                 `üí¨Daily Messages:\n${messageTotals}`;

        const secondaryPayload = {
            message: {
                entity_type: "thread",
                entity_id: threadId,
                content: formattedContent,
            },
        };

        const response = await axios.post(POST_URL, secondaryPayload, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${BEARER_TOKEN}`,
            },
        });

        console.log('–í—Ç–æ—Ä–∏—á–Ω—ã–π Payload —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ Payload:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ 23:50 –ø–æ UTC)
async function processQuestions() {
    try {
        const sessionToken = await getSessionToken();
        const allData = [];

        for (const questionId of QUESTION_IDS) {
            const data = await fetchQuestionData(questionId, sessionToken);
            if (data.length > 0) {
                allData.push({ questionId, data });
            } else {
                console.warn(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId} –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø—É—Å—Ç—ã.`);
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        cachedData = allData;
        console.log('–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.');
    } catch (error) {
        console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤ 9:00 –ø–æ UTC+3)
async function sendCachedData() {
    try {
        if (!cachedData) {
            console.warn('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
            return;
        }
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const allData = cachedData;
        const primaryPayload = createPrimaryPayload(allData);
        await sendPrimaryPayload(primaryPayload, allData);
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}
// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ 23:50 –ø–æ UTC –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
cron.schedule('50 23 * * *', () => {
    console.log('–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ 23:50 –ø–æ UTC');
    processQuestions();
}, {
    timezone: 'Etc/UTC'
});

// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ 9:00 –ø–æ UTC+3 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
cron.schedule('0 9 * * *', () => {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ 9:00 –ø–æ UTC+3');
    sendCachedData();
}, {
    timezone: 'Europe/Moscow'
});

console.log('–ó–∞–ø—É—Å–∫...');
